name: CI/CD Pipeline

on:
  push:
    branches: [ clean-main, develop ]
  pull_request:
    branches: [ clean-main ]

env:
  REGISTRY: docker.io
  IMAGE_NAME: guarantee

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
    
    - name: Run tests
      run: |
        cd guarantee
        chmod +x gradlew
        ./gradlew test

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/clean-main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }} 
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./guarantee
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  update-manifest:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/clean-main'
    
    steps:
    - uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Update Kubernetes manifests
      run: |
        # Docker 이미지 태그 업데이트
        NEW_TAG="${{ github.sha }}"
        sed -i "s|image: guarantee:.*|image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main-${NEW_TAG:0:7}|g" k8s/deployment.yaml
        
        # Git 설정
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # 변경사항 커밋 및 푸시
        git add k8s/deployment.yaml
        git commit -m "Update image tag to main-${NEW_TAG:0:7}" || exit 0
        git push